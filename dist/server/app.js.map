{"version":3,"sources":["../../src/server/app.js"],"names":["express","require","path","favicon","logger","cookieParser","bodyParser","mongoose","Promise","global","getDBURL","userName","password","url","schema","get","dbConn","connect","db","connection","on","err","console","log","once","app","set","join","__dirname","use","json","urlencoded","extended","static","req","res","next","Error","status","render","message","error","module","exports"],"mappings":";;AAQA;;AAeA;;;;AACA;;;;;;AAxBA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,OAAOD,QAAQ,MAAR,CAAX;AACA,IAAIE,UAAUF,QAAQ,eAAR,CAAd;AACA,IAAIG,SAASH,QAAQ,QAAR,CAAb;AACA,IAAII,eAAeJ,QAAQ,eAAR,CAAnB;AACA,IAAIK,aAAaL,QAAQ,aAAR,CAAjB;AACA,IAAIM,WAAWN,QAAQ,UAAR,CAAf;AACAM,SAASC,OAAT,GAAmBC,OAAOD,OAA1B;;;AAGA,IAAME,WAAW,SAAXA,QAAW,GAAM;AACrB,MAAIC,iBAAJ;AAAA,MAAcC,iBAAd;AAAA,MAAwBC,YAAxB;AAAA,MAA6BC,eAA7B;;AADqB,sBAEkB,oBAASC,GAAT,sBAFlB;;AAElBJ,UAFkB,iBAElBA,QAFkB;AAERC,UAFQ,iBAERA,QAFQ;AAEEC,KAFF,iBAEEA,GAFF;AAEOC,QAFP,iBAEOA,MAFP;;AAGrB,MAAME,wBAAsBL,QAAtB,SAAkCC,QAAlC,SAA8CC,GAA9C,SAAqDC,MAA3D;AACA,SAAOE,MAAP;AACD,CALD;AAMA;AACAT,SAASU,OAAT,CAAiBP,UAAjB;AACA,IAAIQ,KAAKX,SAASY,UAAlB;AACAD,GAAGE,EAAH,CAAM,OAAN,EAAe,UAACC,GAAD,EAAS;AAAEC,UAAQC,GAAR,6BAAsCF,GAAtC;AAA+C,CAAzE;AACAH,GAAGM,IAAH,CAAQ,MAAR,EAAgB,YAAM;AAAEF,UAAQC,GAAR,CAAY,uBAAZ;AAAuC,CAA/D;;AAEA;;;AAIA,IAAIE,MAAMzB,SAAV;;AAEA;AACAyB,IAAIC,GAAJ,CAAQ,OAAR,EAAiBxB,KAAKyB,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAjB;AACAH,IAAIC,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;;AAEA;AACA;AACAD,IAAII,GAAJ,CAAQzB,OAAO,KAAP,CAAR;AACAqB,IAAII,GAAJ,CAAQvB,WAAWwB,IAAX,EAAR;AACAL,IAAII,GAAJ,CAAQvB,WAAWyB,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAP,IAAII,GAAJ,CAAQxB,cAAR;AACAoB,IAAII,GAAJ,CAAQ7B,QAAQiC,MAAR,CAAe/B,KAAKyB,IAAL,CAAUC,SAAV,EAAqB,eAArB,CAAf,CAAR;;AAEAH,IAAII,GAAJ,CAAQ,GAAR;AACAJ,IAAII,GAAJ,CAAQ,UAAR;;AAEA;AACAJ,IAAII,GAAJ,CAAQ,UAACK,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,MAAIf,MAAM,IAAIgB,KAAJ,CAAU,WAAV,CAAV;AACAhB,MAAIiB,MAAJ,GAAa,GAAb;AACAF,OAAKf,GAAL;AACD,CAJD;;AAMA;;AAEA;AACA;AACA,IAAII,IAAIV,GAAJ,CAAQ,KAAR,MAAmB,aAAvB,EAAsC;AACpCU,MAAII,GAAJ,CAAQ,UAACR,GAAD,EAAMa,GAAN,EAAWC,GAAX,EAAmB;AACzBA,QAAIG,MAAJ,CAAWjB,IAAIiB,MAAJ,IAAc,GAAzB;AACAH,QAAII,MAAJ,CAAW,OAAX,EAAoB;AAClBC,eAASnB;AADS,KAApB;AAGD,GALD;AAMD;;AAED;AACA;AACAI,IAAII,GAAJ,CAAQ,UAACR,GAAD,EAAMa,GAAN,EAAWC,GAAX,EAAmB;AACzBA,MAAIG,MAAJ,CAAWjB,IAAIiB,MAAJ,IAAc,GAAzB;AACAH,MAAII,MAAJ,CAAW,OAAX,EAAoB;AAClBC,aAASnB,IAAImB,OADK;AAElBC,WAAO;AAFW,GAApB;AAID,CAND;;AASAC,OAAOC,OAAP,GAAiBlB,GAAjB","file":"app.js","sourcesContent":["var express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar mongoose = require('mongoose');\nmongoose.Promise = global.Promise\nimport {ActiveEnv, DBConfig} from './config/app-config';\n\nconst getDBURL = () => {\n  let userName, password, url, schema;\n  ({ userName, password, url, schema } = DBConfig.get(ActiveEnv));\n  const dbConn = `mongodb://${userName}:${password}@${url}/${schema}`;\n  return dbConn;\n};\n//database\nmongoose.connect(getDBURL());\nvar db = mongoose.connection;\ndb.on('error', (err) => { console.log(`Error connecting to db ${err}`); });\ndb.once('open', () => { console.log('connected to Mongo DB'); });\n\n// controller imports\nimport viewRendererController from './controllers/view-renderer-controller';\nimport glucoseController from './controllers/glucose-results-controller';\n\nvar app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\n\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, '/../../public')));\n\napp.use('/', viewRendererController);\napp.use('/results', glucoseController);\n\n// catch 404 and forward to error handler\napp.use((req, res, next) => {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handlers\n\n// development error handler\n// will print stacktrace\nif (app.get('env') === 'development') {\n  app.use((err, req, res) => {\n    res.status(err.status || 500);\n    res.render('error', {\n      message: err\n    });\n  });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use((err, req, res) => {\n  res.status(err.status || 500);\n  res.render('error', {\n    message: err.message,\n    error: {}\n  });\n});\n\n\nmodule.exports = app;\n"]}