{"version":3,"sources":["../../../src/server/helper/authorization-helper.js"],"names":["Constants","httpService","Records","authorize","iss","launch","authorizeHelper","bind","accessToken","code","state","accessTokenHelper","authorizationCode","patient","findByState","userAuthenticationModel","requestBody","AccessTokenRequestBody","post","tokenURL","POSTHeader","response","data","access_token","update","_id","updateResponse","aud","response_type","client_id","redirect_uri","scope","params","get","buildState","issURl","decodeURIComponent","AuthorizationHeader","extension","rest","security","authorizationURL","filter","ext","url","valueUri","authModel","UserAuthentication","save","model","_extend","buildRedirectUrl","Object","keys","map","key","join","Math","floor","random","Date","now"],"mappings":"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","file":"authorization-helper.js","sourcesContent":["\"use strict\";\nimport co from 'co';\nimport * as Constants from '../util/constants';\nimport * as httpService from '../service/http-service'\nimport * as Records from '../models/models';\nimport UserAuthenticationModel from '../models/UserAuthenticationSchema';\nimport {ActiveEnv, FHIRConfig} from '../config/app-config';\nimport util from 'util';\n\n//public methods\nexport const authorize = (iss, launch) => co(authorizeHelper.bind(this, iss, launch));\n\nexport const accessToken = (code, state) => co(accessTokenHelper.bind(this, code, state));\n\n\n//private methods\nconst accessTokenHelper = function* (authorizationCode, state) {\n    let patient, accessToken;\n    const [userAuthenticationModel] = yield UserAuthenticationModel.findByState(state);\n    const requestBody = new Records.AccessTokenRequestBody({ code: authorizationCode });\n    const response = yield httpService.post(userAuthenticationModel.tokenURL, requestBody, new Records.POSTHeader());\n    ({ patient } = response.data);\n    accessToken = response.data.access_token;\n    const updateResponse = yield UserAuthenticationModel.update(userAuthenticationModel._id,\n        { authorizationCode, patient, accessToken });\n    return updateResponse;\n};\n\nconst authorizeHelper = function* (iss, launch) {\n    const aud = iss;\n    let response_type, client_id, redirect_uri, scope, params;\n    ({ response_type, client_id, redirect_uri, scope } = FHIRConfig.get(ActiveEnv));\n    const state = buildState(launch);\n    const issURl = `${decodeURIComponent(iss)}/metadata`;\n    const response = yield httpService.get(issURl, new Records.AuthorizationHeader());\n    const extension = response.data.rest[0].security.extension[0].extension;\n    const authorizationURL = extension.filter(ext => ext.url === 'authorize')[0].valueUri;\n    const tokenURL = extension.filter(ext => ext.url === 'token')[0].valueUri;\n    const authModel = new Records.UserAuthentication({\n        iss, state, authorizationURL, tokenURL\n    });\n    const model = yield UserAuthenticationModel.save(authModel);\n    params = { response_type, client_id, redirect_uri, scope };\n    util._extend(params, { launch, state, aud });\n    const url = buildRedirectUrl(authorizationURL, params);\n    return url;\n};\n\nconst buildRedirectUrl = (authorizationURL, params) =>\n    `${authorizationURL}?${Object.keys(params).map(key => `${key}=${params[key]}`).join('&')}`;\n\nconst buildState = (launch) => `${launch}${Math.floor(Math.random() * 100000, 1)}${Date.now()}`;\n\n\n"]}