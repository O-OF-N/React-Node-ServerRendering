{"version":3,"sources":["../../../src/server/helper/authorization-helper.js"],"names":["Constants","ServerCall","Records","authorize","iss","launch","getaAuthorizeURL","bind","catch","console","log","accessToken","code","getAccessToken","requestBody","AccessTokenBody","post","TOKEN_URL","POSTHeader","result","issURl","decodeURIComponent","get","AuthorizationHeader","authorizeURL","data","rest","security","extension","filter","ext","url","valueUri","redirectUrl","RESPONSE_TYPE","CLIENT_ID","REDIRECT_URL","SCOPE"],"mappings":"AAAA;;;;;;;AACA;;;;AACA;;IAAYA,S;;AACZ;;IAAYC,U;;AACZ;;IAAYC,O;;;;;;AACL,IAAMC,gCAAY,SAAZA,SAAY,CAACC,GAAD,EAAMC,MAAN;AAAA,WACrB,kBAAGC,iBAAiBC,IAAjB,YAA4BH,GAA5B,EAAiCC,MAAjC,CAAH,EACKG,KADL,CACWC,QAAQC,GADnB,CADqB;AAAA,CAAlB;;AAIA,IAAMC,oCAAc,SAAdA,WAAc,CAACC,IAAD;AAAA,WACvB,kBAAGC,eAAeN,IAAf,YAA0BK,IAA1B,CAAH,EACKJ,KADL,CACWC,QAAQC,GADnB,CADuB;AAAA,CAApB;;AAIP,IAAMG,yCAAiB,SAAjBA,cAAiB,CAAWD,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACbE,+BADa,GACC,IAAIZ,QAAQa,eAAZ,CAA4B,EAACH,UAAD,EAA5B,CADD;AAAA;AAAA,2BAEEX,WAAWe,IAAX,CAAgBhB,UAAUiB,SAA1B,EAAoCH,WAApC,EAAgD,IAAIZ,QAAQgB,UAAZ,EAAhD,CAFF;;AAAA;AAEbC,0BAFa;;AAGnBV,4BAAQC,GAAR,CAAYS,MAAZ;;AAHmB;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjBN,cAAiB;AAAA,CAAjB,CAAN;;AAMA,IAAMP,2CAAmB,SAAnBA,gBAAmB,CAAWF,GAAX,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACfe,0BADe,GACHC,mBAAmBjB,GAAnB,CADG;AAAA;AAAA,2BAEAH,WAAWqB,GAAX,CAAeF,MAAf,EAAuB,IAAIlB,QAAQqB,mBAAZ,EAAvB,CAFA;;AAAA;AAEfJ,0BAFe;AAGfK,gCAHe,GAGAL,OAAOM,IAAP,CAAYC,IAAZ,CAAiB,CAAjB,EAAoBC,QAApB,CAA6BC,SAA7B,CAAuC,CAAvC,EAA0CA,SAA1C,CAAoDC,MAApD,CAA2D;AAAA,+BAAOC,IAAIC,GAAJ,KAAY,WAAnB;AAAA,qBAA3D,EAA2F,CAA3F,EAA8FC,QAH9F;AAIfC,+BAJe,GAIDT,eAChB,iBADgB,GACIxB,UAAUkC,aADd,GAEhB,aAFgB,GAEAlC,UAAUmC,SAFV,GAGhB,gBAHgB,GAGGnC,UAAUoC,YAHb,GAIhB,UAJgB,GAIH/B,MAJG,GAKhB,SALgB,GAKJL,UAAUqC,KALN,GAMhB,8BANgB,GAMiBjC,GAVhB;AAAA,sDAWd6B,WAXc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAnB3B,gBAAmB;AAAA,CAAnB,CAAN","file":"authorization-helper.js","sourcesContent":["\"use strict\";\nimport co from 'co';\nimport * as Constants from '../util/constants';\nimport * as ServerCall from '../service/http-service'\nimport * as Records from '../models/models';\nexport const authorize = (iss, launch) =>\n    co(getaAuthorizeURL.bind(this, iss, launch))\n        .catch(console.log);\n\nexport const accessToken = (code) =>\n    co(getAccessToken.bind(this, code))\n        .catch(console.log);\n\nconst getAccessToken = function* (code) {\n    const requestBody = new Records.AccessTokenBody({code});\n    const result = yield ServerCall.post(Constants.TOKEN_URL,requestBody,new Records.POSTHeader());\n    console.log(result);\n};\n\nconst getaAuthorizeURL = function* (iss, launch) {\n    const issURl = `${decodeURIComponent(iss)}/metadata`;\n    const result = yield ServerCall.get(issURl, new Records.AuthorizationHeader());\n    const authorizeURL = result.data.rest[0].security.extension[0].extension.filter(ext => ext.url === 'authorize')[0].valueUri;\n    const redirectUrl = authorizeURL +\n        '?response_type=' + Constants.RESPONSE_TYPE +\n        '&client_id=' + Constants.CLIENT_ID +\n        '&redirect_uri=' + Constants.REDIRECT_URL +\n        '&launch=' + launch +\n        '&scope=' + Constants.SCOPE +\n        '&state=98wrghuwuogerg97&aud=' + iss;\n    return redirectUrl;\n};\n\n\n"]}