{"version":3,"sources":["../../../src/server/helper/authorization-helper.js"],"names":["Constants","httpService","Records","authorize","iss","launch","authorizeHelper","bind","accessToken","code","state","accessTokenHelper","authorizationCode","patient","findByState","userAuthenticationModel","console","log","requestBody","AccessTokenRequestBody","tokenURL","post","POSTHeader","response","data","access_token","update","_id","updateResponse","aud","response_type","client_id","redirect_uri","params","get","buildState","issURl","decodeURIComponent","AuthorizationHeader","authorizationURL","rest","security","extension","filter","ext","url","valueUri","authModel","UserAuthentication","save","model","Object","assign","buildRedirectUrl","keys","map","key","join","Math","floor","random","Date","now"],"mappings":"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","file":"authorization-helper.js","sourcesContent":["\"use strict\";\nimport co from 'co';\nimport * as Constants from '../util/constants';\nimport * as httpService from '../service/http-service'\nimport * as Records from '../models/models';\nimport UserAuthenticationModel from '../models/UserAuthenticationSchema';\nimport {ActiveEnv, FHIRConfig} from '../config/app-config';\n\n\n//public methods\nexport const authorize = (iss, launch) => co(authorizeHelper.bind(this, iss, launch));\n\nexport const accessToken = (code, state) => co(accessTokenHelper.bind(this, code, state));\n\n\n//private methods\nconst accessTokenHelper = function* (authorizationCode, state) {\n    let patient, accessToken;\n    const [userAuthenticationModel] = yield UserAuthenticationModel.findByState(state);\n    console.log(userAuthenticationModel);\n    const requestBody = new Records.AccessTokenRequestBody({ code: authorizationCode });\n    console.log('here????')\n    console.log(requestBody);\n    console.log(userAuthenticationModel.tokenURL);\n    const response = yield httpService.post(userAuthenticationModel.tokenURL, requestBody, new Records.POSTHeader());\n    console.log('here>>>>>>>>')\n    console.log(response);\n    ({ patient } = response.data);\n    accessToken = response.data.access_token;\n    const updateResponse = yield UserAuthenticationModel.update(userAuthenticationModel._id, { authorizationCode, patient, accessToken });\n    return updateResponse;\n};\n\nconst authorizeHelper = function* (iss, launch) {\n    const aud = iss;\n    let response_type, client_id, redirect_uri, params;\n    ({ response_type, client_id, redirect_uri } = FHIRConfig.get(ActiveEnv));\n    const state = buildState(launch);\n    const issURl = `${decodeURIComponent(iss)}/metadata`;\n    const response = yield httpService.get(issURl, new Records.AuthorizationHeader());\n    const authorizationURL = response.data.rest[0].security.extension[0].extension.filter(ext => ext.url === 'authorize')[0].valueUri;\n    const tokenURL = response.data.rest[0].security.extension[0].extension.filter(ext => ext.url === 'token')[0].valueUri;\n    const authModel = new Records.UserAuthentication({\n        iss, state, authorizationURL, tokenURL\n    })\n    const model = yield UserAuthenticationModel.save(authModel);\n    Object.assign(params, { response_type, client_id, redirect_uri }, { launch, state, aud });\n    console.log('params = >>>>>>>>>>>>>>>>>>>>');\n    console.log(params)\n    const url = buildRedirectUrl(authorizationURL, params);\n    console.log('url fetched = ' + url);\n    return url;\n};\n\nconst buildRedirectUrl = (authorizationURL, params) =>\n    `${authorizationURL}?${Object.keys(params).map(key => `${key}=${params[key]}`).join('&')}`\n\nconst buildState = (launch) => `${launch}${Math.floor(Math.random() * 100000, 1)}${Date.now()}`;\n\n\n"]}