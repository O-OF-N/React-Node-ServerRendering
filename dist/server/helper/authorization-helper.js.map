{"version":3,"sources":["../../../src/server/helper/authorization-helper.js"],"names":["Constants","ServerCall","Records","authorize","iss","launch","getaAuthorizeURL","bind","catch","console","log","accessToken","code","getAccessToken","requestBody","AccessTokenRequestBody","post","TOKEN_URL","POSTHeader","result","AccessToken","patient","data","access_token","issURl","decodeURIComponent","get","AuthorizationHeader","authorizeURL","rest","security","extension","filter","ext","url","valueUri","redirectUrl","responseType","clientId","scope"],"mappings":"AAAA;;;;;;;AACA;;;;AACA;;IAAYA,S;;AACZ;;IAAYC,U;;AACZ;;IAAYC,O;;AACZ;;;;;;AAEO,IAAMC,gCAAY,SAAZA,SAAY,CAACC,GAAD,EAAMC,MAAN;AAAA,WACrB,kBAAGC,iBAAiBC,IAAjB,YAA4BH,GAA5B,EAAiCC,MAAjC,CAAH,EACKG,KADL,CACWC,QAAQC,GADnB,CADqB;AAAA,CAAlB;;AAIA,IAAMC,oCAAc,SAAdA,WAAc,CAACC,IAAD;AAAA,WACvB,kBAAGC,eAAeN,IAAf,YAA0BK,IAA1B,CAAH,EACKJ,KADL,CACWC,QAAQC,GADnB,CADuB;AAAA,CAApB;;AAIP,IAAMG,yCAAiB,SAAjBA,cAAiB,CAAWD,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACbE,+BADa,GACC,IAAIZ,QAAQa,sBAAZ,CAAmC,EAAEH,UAAF,EAAnC,CADD;AAAA;AAAA,2BAEEX,WAAWe,IAAX,CAAgBhB,UAAUiB,SAA1B,EAAqCH,WAArC,EAAkD,IAAIZ,QAAQgB,UAAZ,EAAlD,CAFF;;AAAA;AAEbC,0BAFa;AAAA,qDAGZ,IAAIjB,QAAQkB,WAAZ,CAAwB,EAAEC,SAASF,OAAOG,IAAP,CAAYD,OAAvB,EAAgCV,aAAaQ,OAAOG,IAAP,CAAYC,YAAzD,EAAxB,CAHY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjBV,cAAiB;AAAA,CAAjB,CAAN;;AAMA,IAAMP,2CAAmB,SAAnBA,gBAAmB,CAAWF,GAAX,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACfmB,0BADe,GACHC,mBAAmBrB,GAAnB,CADG;AAAA;AAAA,2BAEAH,WAAWyB,GAAX,CAAeF,MAAf,EAAuB,IAAItB,QAAQyB,mBAAZ,EAAvB,CAFA;;AAAA;AAEfR,0BAFe;AAGfS,gCAHe,GAGAT,OAAOG,IAAP,CAAYO,IAAZ,CAAiB,CAAjB,EAAoBC,QAApB,CAA6BC,SAA7B,CAAuC,CAAvC,EAA0CA,SAA1C,CAAoDC,MAApD,CAA2D;AAAA,+BAAOC,IAAIC,GAAJ,KAAY,WAAnB;AAAA,qBAA3D,EAA2F,CAA3F,EAA8FC,QAH9F;AAIfC,+BAJe,GAIDR,eAChB,iBADgB,GACI,sBAAWF,GAAX,uBAA0BW,YAD9B,GAEhB,aAFgB,GAEA,sBAAWX,GAAX,uBAA0BY,QAF1B,GAGhB,gBAHgB,GAGG,sBAAWZ,GAAX,uBAA0BU,WAH7B,GAIhB,SAJgB,GAIJ,sBAAWV,GAAX,uBAA0Ba,KAJtB,GAKhB,UALgB,GAKHlC,MALG,GAMhB,8BANgB,GAMiBD,GAVhB;AAAA,sDAWdgC,WAXc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAnB9B,gBAAmB;AAAA,CAAnB,CAAN","file":"authorization-helper.js","sourcesContent":["\"use strict\";\nimport co from 'co';\nimport * as Constants from '../util/constants';\nimport * as ServerCall from '../service/http-service'\nimport * as Records from '../models/models';\nimport {ActiveEnv,FHIRConfig} from '../config/app-config';\n\nexport const authorize = (iss, launch) =>\n    co(getaAuthorizeURL.bind(this, iss, launch))\n        .catch(console.log);\n\nexport const accessToken = (code) =>\n    co(getAccessToken.bind(this, code))\n        .catch(console.log);\n\nconst getAccessToken = function* (code) {\n    const requestBody = new Records.AccessTokenRequestBody({ code });\n    const result = yield ServerCall.post(Constants.TOKEN_URL, requestBody, new Records.POSTHeader());\n    return new Records.AccessToken({ patient: result.data.patient, accessToken: result.data.access_token })\n};\n\nconst getaAuthorizeURL = function* (iss, launch) {\n    const issURl = `${decodeURIComponent(iss)}/metadata`;\n    const result = yield ServerCall.get(issURl, new Records.AuthorizationHeader());\n    const authorizeURL = result.data.rest[0].security.extension[0].extension.filter(ext => ext.url === 'authorize')[0].valueUri;\n    const redirectUrl = authorizeURL +\n        '?response_type=' + FHIRConfig.get(ActiveEnv).responseType +\n        '&client_id=' + FHIRConfig.get(ActiveEnv).clientId +\n        '&redirect_uri=' + FHIRConfig.get(ActiveEnv).redirectUrl +\n        '&scope=' + FHIRConfig.get(ActiveEnv).scope +\n        '&launch=' + launch +\n        '&state=98wrghuwuogerg97&aud=' + iss;\n    return redirectUrl;\n};\n\n\n"]}