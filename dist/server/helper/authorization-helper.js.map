{"version":3,"sources":["../../../src/server/helper/authorization-helper.js"],"names":["Constants","httpService","Records","authorize","iss","launch","getaAuthorizeURL","bind","catch","console","log","accessToken","code","state","getAccessToken","patient","findByState","userAuthenticationModel","requestBody","AccessTokenRequestBody","post","tokenURL","POSTHeader","response","data","access_token","update","_id","updateResponse","AccessToken","buildState","issURl","decodeURIComponent","get","AuthorizationHeader","authorizationURL","rest","security","extension","filter","ext","url","valueUri","authModel","UserAuthentication","save","redirectUrl","responseType","clientId","scope","Math","floor","random","Date","now"],"mappings":"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","file":"authorization-helper.js","sourcesContent":["\"use strict\";\nimport co from 'co';\nimport * as Constants from '../util/constants';\nimport * as httpService from '../service/http-service'\nimport * as Records from '../models/models';\nimport UserAuthenticationModel from '../models/UserAuthenticationSchema';\nimport {ActiveEnv, FHIRConfig} from '../config/app-config';\n\nexport const authorize = (iss, launch) =>\n    co(getaAuthorizeURL.bind(this, iss, launch))\n        .catch(console.log);\n\nexport const accessToken = (code, state) =>\n    co(getAccessToken.bind(this, code, state))\n        .catch(console.log);\n\nconst getAccessToken = function* (code, state) {\n    let patient, accessToken;\n    const [userAuthenticationModel] = yield UserAuthenticationModel.findByState(state);\n    console.log(userAuthenticationModel);\n    const requestBody = new Records.AccessTokenRequestBody({ code });\n    const response = yield httpService.post(userAuthenticationModel.tokenURL, requestBody, new Records.POSTHeader());\n    ({ patient } = response.data);\n    accessToken = response.data.access_token;\n    const updateResponse = yield UserAuthenticationModel.update(userAuthenticationModel._id, { patient, accessToken });\n    console.log(updateResponse);\n    return new Records.AccessToken({ patient, accessToken })\n};\n\nconst getaAuthorizeURL = function* (iss, launch) {\n    const state = buildState(launch);\n    const issURl = `${decodeURIComponent(iss)}/metadata`;\n    const response = yield httpService.get(issURl, new Records.AuthorizationHeader());\n    const authorizationURL = response.data.rest[0].security.extension[0].extension.filter(ext => ext.url === 'authorize')[0].valueUri;\n    const tokenURL = response.data.rest[0].security.extension[0].extension.filter(ext => ext.url === 'token')[0].valueUri;\n    const authModel = new Records.UserAuthentication({\n        iss, state, authorizationURL, tokenURL\n    })\n    yield UserAuthenticationModel.save(authModel);\n    const redirectUrl = authorizationURL +\n        '?response_type=' + FHIRConfig.get(ActiveEnv).responseType +\n        '&client_id=' + FHIRConfig.get(ActiveEnv).clientId +\n        '&redirect_uri=' + FHIRConfig.get(ActiveEnv).redirectUrl +\n        '&scope=' + FHIRConfig.get(ActiveEnv).scope +\n        '&launch=' + launch +\n        '&state=' + state +\n        '&aud=' + iss;\n    return redirectUrl;\n};\n\nconst buildState = (launch) => `${launch}${Math.floor(Math.random() * 100000, 1)}${Date.now()}`;\n\n\n"]}