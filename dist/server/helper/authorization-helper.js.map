{"version":3,"sources":["../../../src/server/helper/authorization-helper.js"],"names":["Constants","httpService","Records","authorize","iss","launch","getaAuthorizeURL","bind","catch","console","log","accessToken","code","state","getAccessToken","findByState","userAuthenticationModel","requestBody","AccessTokenRequestBody","post","TOKEN_URL","POSTHeader","result","AccessToken","patient","data","access_token","buildState","issURl","decodeURIComponent","get","AuthorizationHeader","authorizationURL","rest","security","extension","filter","ext","url","valueUri","tokenURL","authModel","UserAuthentication","save","redirectUrl","responseType","clientId","scope","Math","floor","random","Date","now"],"mappings":"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","file":"authorization-helper.js","sourcesContent":["\"use strict\";\nimport co from 'co';\nimport * as Constants from '../util/constants';\nimport * as httpService from '../service/http-service'\nimport * as Records from '../models/models';\nimport UserAuthenticationModel from '../models/UserAuthenticationSchema';\nimport {ActiveEnv, FHIRConfig} from '../config/app-config';\n\nexport const authorize = (iss, launch) =>\n    co(getaAuthorizeURL.bind(this, iss, launch))\n        .catch(console.log);\n\nexport const accessToken = (code, state) =>\n    co(getAccessToken.bind(this, code, state))\n        .catch(console.log);\n\nconst getAccessToken = function* (code, state) {\n\n    console.log('here>>>>>>>>>>');\n    const userAuthenticationModel = yield UserAuthenticationModel.findByState(state);\n    console.log(userAuthenticationModel); \n    const requestBody = new Records.AccessTokenRequestBody({ code });\n    const result = yield httpService.post(Constants.TOKEN_URL, requestBody, new Records.POSTHeader());\n    return new Records.AccessToken({ patient: result.data.patient, accessToken: result.data.access_token })\n};\n\nconst getaAuthorizeURL = function* (iss, launch) {\n    const state = buildState(launch);\n    const issURl = `${decodeURIComponent(iss)}/metadata`;\n    const result = yield httpService.get(issURl, new Records.AuthorizationHeader());\n    const authorizationURL = result.data.rest[0].security.extension[0].extension.filter(ext => ext.url === 'authorize')[0].valueUri;\n    const tokenURL = result.data.rest[0].security.extension[0].extension.filter(ext => ext.url === 'token')[0].valueUri;\n    const authModel = new Records.UserAuthentication({\n        iss, state, authorizationURL, tokenURL\n    })\n    yield UserAuthenticationModel.save(authModel);\n    const redirectUrl = authorizationURL +\n        '?response_type=' + FHIRConfig.get(ActiveEnv).responseType +\n        '&client_id=' + FHIRConfig.get(ActiveEnv).clientId +\n        '&redirect_uri=' + FHIRConfig.get(ActiveEnv).redirectUrl +\n        '&scope=' + FHIRConfig.get(ActiveEnv).scope +\n        '&launch=' + launch +\n        '&state=' + state +\n        '&aud=' + iss;\n    return redirectUrl;\n};\n\nconst buildState = (launch) => `${launch}${Math.floor(Math.random() * 100000, 1)}${Date.now()}`;\n\n\n"]}