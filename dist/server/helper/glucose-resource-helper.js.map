{"version":3,"sources":["../../../src/server/helper/glucose-resource-helper.js"],"names":["Records","Constants","fetchGlucoseResults","json","checkResponseStatus","buildObservationFromJson","status","glucose","data","entry","map","resource","code","coding","GLUCOSE_CODE","Observation","date","issued","quantity","valueQuantity","value","interpretation","filter"],"mappings":"AAAA;;;;;;;;;AAEA;;IAAYA,O;;AACZ;;AACA;;IAAYC,S;;;;AAEL,IAAMC,oDAAsB,SAAtBA,mBAAsB,CAACC,IAAD,EAAQ;AACvC,WAAOC,oBAAoBD,IAApB,IAA0BE,yBAAyBF,IAAzB,CAA1B,GAA0D,IAAjE;AACH,CAFM;;AAIP,IAAMC,sBAAsB,SAAtBA,mBAAsB,CAACD,IAAD;AAAA,WAAWA,QAAQA,KAAKG,MAAb,IAAuBH,KAAKG,MAAL,KAAgB,GAAxC,GAA8C,IAA9C,GAAmD,KAA7D;AAAA,CAA5B;;AAEA,IAAMD,2BAA2B,SAA3BA,wBAA2B,CAACF,IAAD,EAAS;AACtC,QAAII,UAAUJ,KAAKK,IAAL,CAAUC,KAAV,CAAgBC,GAAhB,CAAoB,UAACD,KAAD,EAAW;AACzC,YAAIA,MAAME,QAAN,CAAeC,IAAf,CAAoBC,MAAxB,EAAgC;AAAA,uDACbJ,MAAME,QAAN,CAAeC,IAAf,CAAoBC,MADP;;AAAA,gBACrBD,IADqB;;AAE5B,gBAAIA,KAAKA,IAAL,IAAaX,UAAUa,YAA3B,EAAyC;AACrC,uBAAO,IAAId,QAAQe,WAAZ,CAAwB;AAC3BC,0BAAMP,MAAME,QAAN,CAAeM,MADM;AAE3BC,8BAAUT,MAAME,QAAN,CAAeQ,aAAf,CAA6BC,KAFZ;AAG3BC,oCAAgBZ,MAAME,QAAN,CAAeU,cAAf,CAA8BR,MAA9B,CAAqC,CAArC,EAAwCD;AAH7B,iBAAxB,CAAP;AAKH;AACJ;AACJ,KAXa,EAWXU,MAXW,CAWJ;AAAA,eAAUb,KAAD,GAAU,IAAV,GAAiB,KAA1B;AAAA,KAXI,CAAd;AAYA,WAAO,qBAAKF,OAAL,CAAP;AACH,CAdD","file":"glucose-resource-helper.js","sourcesContent":["\"use strict\";\n\nimport * as Records from '../models/models';\nimport {List} from 'immutable';\nimport * as Constants from '../util/constants';\n\nexport const fetchGlucoseResults = (json)=>{\n    return checkResponseStatus(json)?buildObservationFromJson(json): null;\n};\n\nconst checkResponseStatus = (json) => (json && json.status && json.status === 200)? true:false;\n\nconst buildObservationFromJson = (json) =>{\n    let glucose = json.data.entry.map((entry) => {\n        if (entry.resource.code.coding) {\n            const [code] = entry.resource.code.coding;\n            if (code.code == Constants.GLUCOSE_CODE) {\n                return new Records.Observation({\n                    date: entry.resource.issued,\n                    quantity: entry.resource.valueQuantity.value,\n                    interpretation: entry.resource.interpretation.coding[0].code\n                });\n            }\n        }\n    }).filter(entry => (entry) ? true : false);\n    return List(glucose);\n};\n"]}