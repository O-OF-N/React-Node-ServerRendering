{"version":3,"sources":["../../../src/server/helper/medication-helper.js"],"names":["Records","Constants","HttpUtil","fetchMedications","state","fetchMedicationsHelper","result","checkResponseStatus","buildInsulinOrdersResult","findByState","userAuthenticationModel","url","buildMedicationURL","patient","iss","authHeader","buildAuthorizationHeader","json","insulinOrder","data","entry","map","insulin","status","prescriber","dateWritten","dosageInstruction","medicationReference","medicationCodeableConcept","resource","medication","fetchMedicationFromResource","InsulinOrder","display","date","dosage","array","text","administration","fetchMedicationAdministration","filter","concept","route","coding","code","SUBCUTANEOUS","SUBCUTANEOUS_TEXT","INTRAVENOUS_TEXT","constructor"],"mappings":"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","file":"medication-helper.js","sourcesContent":["\"use strict\";\n\nimport * as Records from '../models/models';\nimport {List} from 'immutable';\nimport * as Constants from '../util/constants';\nimport {get} from '../service/http-service'\nimport * as HttpUtil from '../util/http-utils';\nimport UserAuthenticationModel from '../models/UserAuthenticationSchema';\n\n//public functions\nexport const fetchMedications = function* (state) {\n    const result = yield* fetchMedicationsHelper(state);\n    return HttpUtil.checkResponseStatus(result) ? buildInsulinOrdersResult(result) : null;\n};\n\n//Private functions\nconst fetchMedicationsHelper = function* (state) {\n    const [userAuthenticationModel] = yield UserAuthenticationModel.findByState(state);\n    const url = HttpUtil.buildMedicationURL(userAuthenticationModel.patient, userAuthenticationModel.iss);\n    const authHeader = HttpUtil.buildAuthorizationHeader(userAuthenticationModel);\n    const result = yield get(url, authHeader);\n    return result;\n};\n\n\nconst buildInsulinOrdersResult = (json) => {\n    let insulinOrder = (json.data && json.data.entry) ? json.data.entry.map((entry) => {\n        let insulin = null;\n        let status, prescriber, dateWritten, dosageInstruction, medicationReference, medicationCodeableConcept;\n        if (entry && entry.resource) {\n            const resource = entry.resource;\n            ({ status, prescriber, dateWritten, dosageInstruction, medicationCodeableConcept } = resource);\n            const medication  = fetchMedicationFromResource(medicationCodeableConcept);\n            insulin = (medication) ? new Records.InsulinOrder({\n                status,\n                prescriber: (prescriber) ? prescriber.display : null,\n                date: dateWritten,\n                dosage: (dosageInstruction && dosageInstruction instanceof array && dosageInstruction[0]) ? dosageInstruction[0].text : null,\n                medication,\n                administration: fetchMedicationAdministration(dosageInstruction)\n            }) : null;\n        };\n        return insulin;\n    }).filter(entry => (entry) ? true : false) : null;\n    return List(insulinOrder);\n};\n\nconst fetchMedicationFromResource = (concept) => (concept) ? concept.text : null;\n\nconst fetchMedicationAdministration = (dosage) => (dosage && dosage instanceof array && dosage[0] && dosage[0].route && dosage[0].route.coding && dosage[0].route.coding instanceof array && dosage[0].route.coding[0]) ? dosage[0].route.coding[0].code === Constants.SUBCUTANEOUS ? Constants.SUBCUTANEOUS_TEXT : Constants.INTRAVENOUS_TEXT : null;\n\nconst array = (()=>[].constructor)()"]}