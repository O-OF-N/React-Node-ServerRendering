{"version":3,"sources":["../../../src/server/helper/medication-helper.js"],"names":["Records","Constants","HttpUtil","Exceptions","fetchMedications","state","fetchMedicationsHelper","result","insulinOrders","buildInsulinOrdersResult","categorizeOrders","findByState","userAuthenticationModel","InvalidStateError","url","buildMedicationURL","patient","iss","authHeader","buildAuthorizationHeader","checkResponseStatus","AuthenticationError","response","status","MedicationFetchError","message","json","insulinOrder","data","entry","map","insulin","prescriber","dateWritten","dosageInstruction","medicationReference","medicationCodeableConcept","note","resource","medication","fetchMedicationFromResource","InsulinOrder","date","dosage","Array","text","name","administration","fetchMedicationAdministration","code","parseInt","comments","filter","concept","coding","codes","system","RXNORM_URL","route","SUBCUTANEOUS","SUBCUTANEOUS_TEXT","INTRAVENOUS_TEXT","medicationOrders","getIngredients","insulinOrdersWithIngredients","ORDER_CATEGORIZATION","forEach","value","key","medicationOrder","MedicationOrder","type","medications","checkValueAndOrder","order","checkIngredients","ingredients","length","checkDosage","push","valueCodes","orderCodes","vc","valueCode","size","contains","getFunctions","fetchHttpGetFn","bind","toJS","processedIngredients","processIngredients","ingredient","index","merge","ingredientsList","rxNormData","relatedGroup","conceptGroup","group","tty","sbdcList","conceptProperties","sbdcName","conceptProperty","rxcui","Ingredients","addTestMedications","bolus1","Date","bolus2","bolus3"],"mappings":"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","file":"medication-helper.js","sourcesContent":["\"use strict\";\n\nimport * as Records from '../models/models';\nimport { List } from 'immutable';\nimport * as Constants from '../util/constants';\nimport { get, all } from '../service/http-service'\nimport * as HttpUtil from '../util/http-utils';\nimport UserAuthenticationModel from '../models/UserAuthenticationSchema';\nimport * as Exceptions from '../util/exceptions'\n\n//public functions\nexport const fetchMedications = function* (state) {\n    const result = yield* fetchMedicationsHelper(state);\n    const insulinOrders = buildInsulinOrdersResult(result);\n    return insulinOrders ? yield* categorizeOrders(insulinOrders) : null;\n    //return insulinOrders ? yield* categorizeOrders(insulinOrders.push(...addTestMedications())) : null;\n};\n\n//Private functions\nconst fetchMedicationsHelper = function* (state) {\n    const [userAuthenticationModel] = yield UserAuthenticationModel.findByState(state);\n    if (!userAuthenticationModel) throw new Exceptions.InvalidStateError(`State ${state} is invalid`);\n    const url = userAuthenticationModel ? HttpUtil.buildMedicationURL(userAuthenticationModel.patient, userAuthenticationModel.iss) : null;\n    const authHeader = userAuthenticationModel ? HttpUtil.buildAuthorizationHeader(userAuthenticationModel) : null;\n    try {\n        const result = (url && authHeader) ? yield get(url, authHeader) : null;\n        if (result && HttpUtil.checkResponseStatus(result)) return result;\n        else throw new Exceptions.AuthenticationError('Authentication failed', userAuthenticationModel);\n    } catch (err) {\n        if (err.response.status === 500) {\n            throw new Exceptions.MedicationFetchError('Cerner services may be down');\n        } else {\n            throw new Exceptions.MedicationFetchError(err.message);\n        }\n    }\n};\n\n\nconst buildInsulinOrdersResult = (json) => {\n    let insulinOrder = (json.data && json.data.entry) ? json.data.entry.map((entry) => {\n        let insulin = null;\n        let status, prescriber, dateWritten, dosageInstruction, medicationReference, medicationCodeableConcept, note;\n        if (entry && entry.resource) {\n            const resource = entry.resource;\n            ({ status, prescriber, dateWritten, dosageInstruction, medicationCodeableConcept, note } = resource);\n            const medication = fetchMedicationFromResource(medicationCodeableConcept);\n            insulin = (medication) ? new Records.InsulinOrder({\n                status,\n                date: dateWritten,\n                dosage: (dosageInstruction && dosageInstruction instanceof Array && dosageInstruction[0]) ? dosageInstruction[0].text : null,\n                medication: medication.name,\n                administration: fetchMedicationAdministration(dosageInstruction),\n                code: parseInt(medication.code),\n                comments: note ? note : ''\n            }) : null;\n        };\n        return insulin;\n    }).filter(entry => (entry) ? true : false) : null;\n    return List(insulinOrder);\n};\n\n//const extractComments = comment => comment.split('\\n').filter(c => c.indexOf('Order Comment: ')//>-1)\n\nconst fetchMedicationFromResource = (concept) => (concept) ? {\n    name: concept.text, code: concept.coding ?\n        concept.coding.filter(codes => codes.system === Constants.RXNORM_URL)[0].code : null\n} : null;\n\nconst fetchMedicationAdministration = (dosage) => (dosage && dosage instanceof Array && dosage[0] && dosage[0].route &&\n    dosage[0].route.coding && dosage[0].route.coding instanceof Array && dosage[0].route.coding[0]) ?\n    dosage[0].route.coding[0].code === Constants.SUBCUTANEOUS ? Constants.SUBCUTANEOUS_TEXT : Constants.INTRAVENOUS_TEXT : null;\n\n\nconst categorizeOrders = function* (insulinOrders) {\n    let medicationOrders = [];\n    const insulinOrdersWithIngredients = yield* getIngredients(insulinOrders);\n    Constants.ORDER_CATEGORIZATION.forEach((value, key) => {\n        const medicationOrder = new Records.MedicationOrder({\n            type: key, medications: new List(insulinOrdersWithIngredients.filter(order =>\n                checkValueAndOrder(value, order) ? checkIngredients(value.code, order.ingredients.codes).length && checkDosage(value, order) : false\n            ))\n        });\n        medicationOrders.push(medicationOrder);\n    });\n    return medicationOrders;\n};\n\nconst checkValueAndOrder = (value, order) => (value && order && value.code && order.administration && order.ingredients && order.ingredients.codes) ? true : false;\n\nconst checkIngredients = (valueCodes, orderCodes) => valueCodes.filter(valueCode => {\n    const vc = new List(valueCode);\n    return vc.size === orderCodes.size && vc.contains(...orderCodes);\n});\n\nconst checkDosage = (value, order) => (value.dosage && value.dosage === order.administration) || (!value.dosage);\n\nconst getIngredients = function* (insulinOrders) {\n    try {\n        const getFunctions = insulinOrders.map(insulinOrder => fetchHttpGetFn.bind(null, insulinOrder.code)).toJS();\n        const ingredients = yield all(getFunctions);\n        const processedIngredients = ingredients.map(ingredient => processIngredients(ingredient));\n        return insulinOrders.map((insulinOrder, index) => insulinOrder.merge({ ingredients: processedIngredients[index] }));\n    } catch (err) {\n        throw new Exceptions.MedicationFetchError(err.message);\n    }\n};\n\nconst fetchHttpGetFn = (code) => get(`https://rxnav.nlm.nih.gov/REST/rxcui/${code}/related?tty=IN+SBDC`);\n\nconst processIngredients = rxNormData => {\n    const ingredientsList = rxNormData.data.relatedGroup.conceptGroup.filter(group => group.tty === 'IN');\n    const sbdcList = rxNormData.data.relatedGroup.conceptGroup.filter(group => group.tty === 'SBDC');\n    const response = ingredientsList && sbdcList && ingredientsList instanceof Array && sbdcList instanceof Array &&\n        ingredientsList.length > 0 && sbdcList.length > 0 && ingredientsList[0] && sbdcList[0] && sbdcList[0].conceptProperties &&\n        sbdcList[0].conceptProperties instanceof Array && sbdcList[0].conceptProperties.length > 0 ?\n        { ingredients: ingredientsList[0], sbdcName: sbdcList[0].conceptProperties[0].name } : null;\n    const ingredients = response && response.ingredients && response.ingredients.conceptProperties ?\n        response.ingredients.conceptProperties.map(conceptProperty => {\n            const code = { code: parseInt(conceptProperty.rxcui), name: conceptProperty.name };\n            return code;\n        }) : null;\n    return ingredients ? ingredients.length === 1 ? new Records.Ingredients({ codes: List([ingredients[0].code]), name: ingredients[0].name }) :\n        new Records.Ingredients({ codes: List(ingredients.map(ingredient => ingredient.code)), name: response.sbdcName }) : null;\n};\n\nconst addTestMedications = () => {\n    const bolus1 = new Records.InsulinOrder({\n        status: 'active',\n        date: new Date(),\n        dosage: '10 unit(s), Subcutaneous, BID',\n        medication: 'Regular Insulin, Human 100 UNT/ML [HumuLIN R]',\n        administration: Constants.SUBCUTANEOUS_TEXT,\n        code: 575148,\n        comments: '2 units, Injection, Subcutaneously,Bedtime,Routine,Start Date 02/11/2016 8:00.'\n    });\n    const bolus2 = new Records.InsulinOrder({\n        status: 'active',\n        date: new Date(),\n        dosage: '11 unit(s), Subcutaneous, BID',\n        medication: 'Insulin, Aspart, Human 100 UNT/ML [NovoLOG]',\n        administration: Constants.SUBCUTANEOUS_TEXT,\n        code: 575679,\n        comments: '1 unit, Injection, Subcutaneously,WM,Routine,Start Date 02/11/2016 8:00. Please give NovoLOG with lunch and dinner'\n    });\n    const bolus3 = new Records.InsulinOrder({\n        status: 'active',\n        date: new Date(),\n        dosage: '12 unit(s), Subcutaneous, BID',\n        medication: 'HumaLOG Mix 75/25',\n        administration: Constants.SUBCUTANEOUS_TEXT,\n        code: 259111,\n        comments: '1 unit, Injection, Subcutaneously,WM,Routine,Start Date 02/11/2016 8:00. Please give NovoLOG with lunch and dinner'\n    });\n    return new List([bolus1, bolus2, bolus3]);\n};\n"]}