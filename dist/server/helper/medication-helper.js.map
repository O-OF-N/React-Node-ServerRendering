{"version":3,"sources":["../../../src/server/helper/medication-helper.js"],"names":["Records","Constants","HttpUtil","fetchMedications","state","fetchMedicationsHelper","result","checkResponseStatus","buildInsulinOrdersResult","findByState","userAuthenticationModel","url","buildMedicationURL","patient","iss","authHeader","buildAuthorizationHeader","json","insulinOrder","data","entry","map","insulin","resource","console","log","status","prescriber","dateWritten","dosageInstruction","medicationReference","medicationCodeableConcept","fetchMedicationFromResource","medication","InsulinOrder","display","date","dosage","text","administration","fetchMedicationAdministration","filter","reference","concept","route","coding","code","SUBCUTANEOUS","SUBCUTANEOUS_TEXT","INTRAVENOUS_TEXT"],"mappings":"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","file":"medication-helper.js","sourcesContent":["\"use strict\";\n\nimport * as Records from '../models/models';\nimport {List} from 'immutable';\nimport * as Constants from '../util/constants';\nimport {get} from '../service/http-service'\nimport * as HttpUtil from '../util/http-utils';\nimport UserAuthenticationModel from '../models/UserAuthenticationSchema';\n\n//public functions\nexport const fetchMedications = function* (state) {\n    const result = yield* fetchMedicationsHelper(state);\n    return HttpUtil.checkResponseStatus(result) ? buildInsulinOrdersResult(result) : null;\n};\n\n//Private functions\nconst fetchMedicationsHelper = function* (state) {\n    const [userAuthenticationModel] = yield UserAuthenticationModel.findByState(state);\n    const url = HttpUtil.buildMedicationURL(userAuthenticationModel.patient, userAuthenticationModel.iss);\n    const authHeader = HttpUtil.buildAuthorizationHeader(userAuthenticationModel);\n    const result = yield get(url, authHeader);\n    return result;\n};\n\n\nconst buildInsulinOrdersResult = (json) => {\n    let insulinOrder = (json.data && json.data.entry) ? json.data.entry.map((entry) => {\n        let insulin = null;\n        if (entry && entry.resource) {\n            const resource = entry.resource;\n            console.log(\">>>>>>>>>>>>>>>>>>>>>\"+resource.status);\n            ({ status, prescriber, dateWritten, dosageInstruction, medicationReference, medicationCodeableConcept } = resource);\n            console.log(resource.status);\n            ({ medication } = fetchMedicationFromResource(medicationReference, medicationCodeableConcept));\n            insulin = (medication) ? new Records.InsulinOrder({\n                status,\n                prescriber: (prescriber) ? prescriber.display : null,\n                date: dateWritten,\n                dosage: (dosageInstruction && dosageInstruction instanceof 'Array' && dosageInstruction[0]) ? dosageInstruction[0].text : null,\n                medication,\n                administration: fetchMedicationAdministration(dosageInstruction)\n            }) : null;\n        }\n        return insulin;\n    }).filter(entry => (entry) ? true : false) : null;\n    return List(insulinOrder);\n};\n\nconst fetchMedicationFromResource = (reference, concept) => reference ? reference.display : (concept) ? concept.text : null;\n\nconst fetchMedicationAdministration = (dosage) => (dosage && dosage instanceof 'Array' && dosage[0] && dosage[0].route && dosage[0].route.coding && dosage[0].route.coding instanceof 'Array' && dosage[0].route.coding[0]) ? dosage[0].route.coding[0].code === Constants.SUBCUTANEOUS ? Constants.SUBCUTANEOUS_TEXT : Constants.INTRAVENOUS_TEXT : null;"]}