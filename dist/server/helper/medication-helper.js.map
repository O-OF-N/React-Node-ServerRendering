{"version":3,"sources":["../../../src/server/helper/medication-helper.js"],"names":["Records","Constants","HttpUtil","fetchMedications","state","fetchMedicationsHelper","result","insulinOrders","checkResponseStatus","buildInsulinOrdersResult","categorizeOrders","findByState","userAuthenticationModel","url","buildMedicationURL","patient","iss","authHeader","buildAuthorizationHeader","json","insulinOrder","data","entry","map","insulin","status","prescriber","dateWritten","dosageInstruction","medicationReference","medicationCodeableConcept","resource","medication","fetchMedicationFromResource","InsulinOrder","date","dosage","Array","text","name","administration","fetchMedicationAdministration","code","parseInt","comments","additionalInstructions","filter","concept","coding","codes","system","RXNORM_URL","route","SUBCUTANEOUS","SUBCUTANEOUS_TEXT","INTRAVENOUS_TEXT","medicationOrders","ORDER_CATEGORIZATION","forEach","value","key","medicationOrder","MedicationOrder","type","medications","includes","order","push"],"mappings":"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","file":"medication-helper.js","sourcesContent":["\"use strict\";\n\nimport * as Records from '../models/models';\nimport { List } from 'immutable';\nimport * as Constants from '../util/constants';\nimport { get } from '../service/http-service'\nimport * as HttpUtil from '../util/http-utils';\nimport UserAuthenticationModel from '../models/UserAuthenticationSchema';\n\n//public functions\nexport const fetchMedications = function* (state) {\n    const result = yield* fetchMedicationsHelper(state);\n    const insulinOrders = HttpUtil.checkResponseStatus(result) ? buildInsulinOrdersResult(result) : null;\n    return insulinOrders ? categorizeOrders(insulinOrders) : null;\n};\n\n//Private functions\nconst fetchMedicationsHelper = function* (state) {\n    const [userAuthenticationModel] = yield UserAuthenticationModel.findByState(state);\n    const url = HttpUtil.buildMedicationURL(userAuthenticationModel.patient, userAuthenticationModel.iss);\n    const authHeader = HttpUtil.buildAuthorizationHeader(userAuthenticationModel);\n    const result = yield get(url, authHeader);\n    return result;\n};\n\n\nconst buildInsulinOrdersResult = (json) => {\n    let insulinOrder = (json.data && json.data.entry) ? json.data.entry.map((entry) => {\n        let insulin = null;\n        let status, prescriber, dateWritten, dosageInstruction, medicationReference, medicationCodeableConcept;\n        if (entry && entry.resource) {\n            const resource = entry.resource;\n            ({ status, prescriber, dateWritten, dosageInstruction, medicationCodeableConcept } = resource);\n            const medication = fetchMedicationFromResource(medicationCodeableConcept);\n            insulin = (medication) ? new Records.InsulinOrder({\n                status,\n                date: dateWritten,\n                dosage: (dosageInstruction && dosageInstruction instanceof Array && dosageInstruction[0]) ? dosageInstruction[0].text : null,\n                medication: medication.name,\n                administration: fetchMedicationAdministration(dosageInstruction),\n                code: parseInt(medication.code),\n                comments: (dosageInstruction && dosageInstruction instanceof Array && dosageInstruction[0]) ? dosageInstruction[0].additionalInstructions : null\n            }) : null;\n        };\n        return insulin;\n    }).filter(entry => (entry) ? true : false) : null;\n    return List(insulinOrder);\n};\n\nconst fetchMedicationFromResource = (concept) => (concept) ? { name: concept.text, code: concept.coding ? concept.coding.filter(codes => codes.system === Constants.RXNORM_URL)[0].code : null } : null;\n\nconst fetchMedicationAdministration = (dosage) => (dosage && dosage instanceof Array && dosage[0] && dosage[0].route && dosage[0].route.coding && dosage[0].route.coding instanceof Array && dosage[0].route.coding[0]) ? dosage[0].route.coding[0].code === Constants.SUBCUTANEOUS ? Constants.SUBCUTANEOUS_TEXT : Constants.INTRAVENOUS_TEXT : null;\n\nconst categorizeOrders = (insulinOrders) => {\n    let medicationOrders = [];\n    Constants.ORDER_CATEGORIZATION.forEach((value, key) => {\n        const medicationOrder = new Records.MedicationOrder({type: key, medications: new List(insulinOrders.filter(order => value.code.includes(order.code) && ((value.dosage && value.dosage === order.administration) || (!value.dosage))))});\n        medicationOrders.push(medicationOrder);\n    });\n    return medicationOrders;\n};\n"]}