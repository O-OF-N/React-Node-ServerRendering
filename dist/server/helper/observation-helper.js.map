{"version":3,"sources":["../../../src/server/helper/observation-helper.js"],"names":["Records","Constants","HttpUtil","fetchGlucoseResults","state","fetchObservationResultsHelper","result","checkResponseStatus","buildGlucoseResultsFromJson","fetchLabResults","buildLabResultsFromJson","lonicCodes","findByState","userAuthenticationModel","url","buildObeservationURL","patient","iss","authHeader","buildAuthorizationHeader","json","glucose","data","entry","map","resource","Observation","code","coding","text","date","issued","quantity","valueQuantity","value","interpretation","filter","lab","console","log","unit"],"mappings":"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","file":"observation-helper.js","sourcesContent":["\"use strict\";\n\nimport * as Records from '../models/models';\nimport {List} from 'immutable';\nimport * as Constants from '../util/constants';\nimport {get} from '../service/http-service'\nimport * as HttpUtil from '../util/http-utils';\nimport UserAuthenticationModel from '../models/UserAuthenticationSchema';\n\n//Public functions\nexport const fetchGlucoseResults = function* (state) {\n    const result = yield* fetchObservationResultsHelper(state, [\"glucose\"]);\n    return HttpUtil.checkResponseStatus(result) ? buildGlucoseResultsFromJson(result) : null;\n};\n\nexport const fetchLabResults = function* (state) {\n    const result = yield* fetchObservationResultsHelper(state, [\"ketones\",\"ph\",\"serum\"]);\n    return HttpUtil.checkResponseStatus(result) ? buildLabResultsFromJson(result) : null;\n};\n\n\n//Private functions\nconst fetchObservationResultsHelper = function* (state, lonicCodes) {\n    const [userAuthenticationModel] = yield UserAuthenticationModel.findByState(state);\n    const url = HttpUtil.buildObeservationURL(userAuthenticationModel.patient, lonicCodes, userAuthenticationModel.iss);\n    const authHeader = HttpUtil.buildAuthorizationHeader(userAuthenticationModel);\n    const result = yield get(url, authHeader);\n    return result;\n};\n\nconst buildGlucoseResultsFromJson = (json) => {\n    let glucose = (json.data && json.data.entry)?json.data.entry.map((entry) => {\n        if (entry && entry.resource) {\n            const resource = entry.resource;\n            return new Records.Observation({\n                resource: (resource.code) ? resource.code.coding : null,\n                text: (resource.code) ? resource.code.text : null,\n                date: resource.issued,\n                quantity: resource.valueQuantity.value,\n                interpretation: (resource.interpretation && resource.interpretation.coding) ? resource.interpretation.coding[0].code : null\n            });\n        }\n    }).filter(entry => (entry) ? true : false):null;\n    return List(glucose);\n};\n\nconst buildLabResultsFromJson = (json) => {\n    let lab = (json.data && json.data.entry)?json.data.entry.map((entry) => {\n        if (entry && entry.resource) {\n            const resource = entry.resource;\n            console.log(resource);\n            return new Records.Observation({\n                resource: (resource.code) ? resource.code.coding : null,\n                text: (resource.code) ? resource.code.text : null,\n                date: resource.issued,\n                quantity: resource.valueQuantity? resource.valueQuantity.value + resource.valueQuantity.unit: null,\n                interpretation: (resource.interpretation && resource.interpretation.coding) ? resource.interpretation.coding[0].code : null\n            });\n        }\n    }).filter(entry => (entry) ? true : false):null;\n    return List(lab);\n}\n"]}