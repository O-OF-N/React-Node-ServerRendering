{"version":3,"sources":["../../../src/server/helper/observation-helper.js"],"names":["Records","Constants","HttpUtil","fetchGlucoseResults","state","fetchObservationResultsHelper","GLUCOSE_CODES","result","checkResponseStatus","buildGlucoseResultsFromJson","fetchLabResults","LABS_LOINIC_CODES","labs","buildLabResultsFromJson","groupLabs","lonicCodesList","date","duration","findByState","userAuthenticationModel","url","buildObeservationURL","patient","flatMap","iss","getDateRange","authHeader","buildAuthorizationHeader","lonicCodes","forEach","lonicCode","LONIC_CODES","get","codes","Array","push","console","log","loincCodes","results","map","buildResultLoincMap","lc","filter","r","observation","size","code","LabResult","includes","resource","sort","slice","LAB_RESULT_COUNT","today","Date","yesterday","setHours","getHours","toISOString","json","glucose","data","entry","buildObservationFromResource","compare","lab","Observation","coding","system","LONIC_URL","text","issued","quantity","valueQuantity","value","unit","interpretation","source","category","OBSERVATION_CATEGORY_URL","r1","r2","toLowerCase"],"mappings":"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","file":"observation-helper.js","sourcesContent":["\"use strict\";\n\nimport * as Records from '../models/models';\nimport { List, Map as immutableMap } from 'immutable';\nimport * as Constants from '../util/constants';\nimport { get } from '../service/http-service'\nimport * as HttpUtil from '../util/http-utils';\nimport UserAuthenticationModel from '../models/UserAuthenticationSchema';\n\n//Public functions\nexport const fetchGlucoseResults = function* (state) {\n    /*const result = yield* fetchObservationResultsHelper(state, Constants.GLUCOSE_CODES, new Date(), 24);*/\n    const result = yield* fetchObservationResultsHelper(state, Constants.GLUCOSE_CODES);\n    return HttpUtil.checkResponseStatus(result) ? buildGlucoseResultsFromJson(result) : null;\n};\n\nexport const fetchLabResults = function* (state) {\n    /*const result = yield* fetchObservationResultsHelper(state, Constants.LABS_LOINIC_CODES, new Date(), 24);*/\n    const result = yield* fetchObservationResultsHelper(state, Constants.LABS_LOINIC_CODES);\n    const labs = HttpUtil.checkResponseStatus(result) ? buildLabResultsFromJson(result) : null;\n    return groupLabs(Constants.LABS_LOINIC_CODES, labs);\n};\n\n\n//Private functions\nconst fetchObservationResultsHelper = function* (state, lonicCodesList, date = null, duration = 0) {\n    const [userAuthenticationModel] = yield UserAuthenticationModel.findByState(state);\n    const url = HttpUtil.buildObeservationURL(userAuthenticationModel.patient, flatMap(lonicCodesList), userAuthenticationModel.iss, getDateRange(date, duration));\n    const authHeader = HttpUtil.buildAuthorizationHeader(userAuthenticationModel);\n    const result = yield get(url, authHeader);\n    return result;\n};\n\nconst flatMap = (lonicCodesList) => {\n    let lonicCodes = [];\n    lonicCodesList ? lonicCodesList.forEach(codes => {\n        const lonicCode = Constants.LONIC_CODES.get(codes);\n        lonicCode instanceof Array ? lonicCodes.push(...lonicCode) : lonicCodes.push(lonicCode);\n    }) : null;\n    console.log('lonic codes = ');\n    console.log(lonicCodes);\n    return lonicCodes;\n};\n\nconst groupLabs = (loincCodes, results) => loincCodes.map(lc => buildResultLoincMap(lc, Constants.LONIC_CODES.get(lc), results)).filter(r => r.observation.size);\n\nconst buildResultLoincMap = (lc, code, results) => new Records.LabResult({ code: lc, observation: results.filter(r => code.includes(r.resource)).sort(r => r.date).slice(0, Constants.LAB_RESULT_COUNT) });\n\nconst getDateRange = (date, duration) => {\n    if (date && duration) {\n        const today = new Date(date);\n        const yesterday = new Date(today);\n        yesterday.setHours(today.getHours() - 24);\n        return [new Date(yesterday).toISOString(), today.toISOString()];\n    }\n    return null;\n};\n\nconst buildGlucoseResultsFromJson = (json) => {\n    let glucose = (json.data && json.data.entry) ? json.data.entry.map((entry) => {\n        if (entry && entry.resource) {\n            const resource = entry.resource;\n            return buildObservationFromResource(resource);\n        }\n    }).filter(entry => (entry) ? true : false).sort(compare) : null;\n    return List(glucose);\n};\n\nconst buildLabResultsFromJson = (json) => {\n    let lab = (json.data && json.data.entry) ? json.data.entry.map((entry) => {\n        if (entry && entry.resource) {\n            const resource = entry.resource;\n            return buildObservationFromResource(resource);\n        }\n    }).filter(entry => (entry) ? true : false) : null;\n    return List(lab);\n};\n\nconst buildObservationFromResource = (resource) => new Records.Observation({\n    resource: (resource.code && resource.code.coding) ? resource.code.coding.filter(code => code.system === Constants.LONIC_URL)[0]['code'] : null,\n    text: (resource.code) ? resource.code.text : null,\n    date: resource.issued,\n    quantity: resource.valueQuantity && resource.valueQuantity.value ? resource.valueQuantity.value : null,\n    unit: resource.valueQuantity && resource.valueQuantity.unit ? resource.valueQuantity.unit : null,\n    interpretation: (resource.interpretation && resource.interpretation.coding) ? resource.interpretation.coding[0].code : null,\n    source: (resource.category && resource.category.coding) ? resource.category.coding.filter(code => code.system === Constants.OBSERVATION_CATEGORY_URL)[0]['code'] : null\n});\n\nconst compare = (r1, r2) => (r1 && r2) ? r1.text.toLowerCase() > r2.text.toLowerCase() ? 1 : r2.text.toLowerCase() > r1.text.toLowerCase() ? -1 : r1.date > r2.date ? 1 : -1 : 0;"]}