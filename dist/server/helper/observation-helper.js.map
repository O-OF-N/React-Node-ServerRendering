{"version":3,"sources":["../../../src/server/helper/observation-helper.js"],"names":["Records","Constants","HttpUtil","fetchGlucoseResults","state","fetchObservationResultsHelper","GLUCOSE_CODES","result","checkResponseStatus","buildGlucoseResultsFromJson","fetchLabResults","LABS_LOINIC_CODES","labs","buildLabResultsFromJson","sortBy","l","date","lonicCodes","duration","findByState","userAuthenticationModel","url","buildObeservationURL","patient","iss","getDateRange","authHeader","buildAuthorizationHeader","today","Date","yesterday","setHours","getHours","toISOString","json","glucose","data","entry","map","resource","buildObservationFromResource","filter","lab","Observation","code","coding","text","issued","quantity","valueQuantity","value","unit","interpretation"],"mappings":"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","file":"observation-helper.js","sourcesContent":["\"use strict\";\n\nimport * as Records from '../models/models';\nimport { List } from 'immutable';\nimport * as Constants from '../util/constants';\nimport { get } from '../service/http-service'\nimport * as HttpUtil from '../util/http-utils';\nimport UserAuthenticationModel from '../models/UserAuthenticationSchema';\n\n//Public functions\nexport const fetchGlucoseResults = function* (state) {\n    const result = yield* fetchObservationResultsHelper(state, Constants.GLUCOSE_CODES);\n    return HttpUtil.checkResponseStatus(result) ? buildGlucoseResultsFromJson(result) : null;\n};\n\nexport const fetchLabResults = function* (state) {\n    /*const result = yield* fetchObservationResultsHelper(state, Constants.LABS_LOINIC_CODES, new Date(), 24);*/\n    const result = yield* fetchObservationResultsHelper(state, Constants.LABS_LOINIC_CODES);\n    const labs =  HttpUtil.checkResponseStatus(result) ? buildLabResultsFromJson(result).sortBy(l => l.date) : null;\n    return labs;\n};\n\n\n//Private functions\nconst fetchObservationResultsHelper = function* (state, lonicCodes, date = null, duration = 0) {\n    const [userAuthenticationModel] = yield UserAuthenticationModel.findByState(state);\n    const url = HttpUtil.buildObeservationURL(userAuthenticationModel.patient, lonicCodes, userAuthenticationModel.iss, getDateRange(date, duration));\n    const authHeader = HttpUtil.buildAuthorizationHeader(userAuthenticationModel);\n    const result = yield get(url, authHeader);\n    return result;\n};\n\nconst getDateRange = (date, duration) => {\n    if (date && duration) {\n        const today = new Date(date);\n        const yesterday = new Date(today);\n        yesterday.setHours(today.getHours() - 24);\n        return [new Date(yesterday).toISOString(), today.toISOString()];\n    }\n    return null;\n}\n\nconst buildGlucoseResultsFromJson = (json) => {\n    let glucose = (json.data && json.data.entry) ? json.data.entry.map((entry) => {\n        if (entry && entry.resource) {\n            const resource = entry.resource;\n            return buildObservationFromResource(resource);\n        }\n    }).filter(entry => (entry) ? true : false) : null;\n    return List(glucose);\n};\n\nconst buildLabResultsFromJson = (json) => {\n    let lab = (json.data && json.data.entry) ? json.data.entry.map((entry) => {\n        if (entry && entry.resource) {\n            const resource = entry.resource;\n            return buildObservationFromResource(resource);\n        }\n    }).filter(entry => (entry) ? true : false) : null;\n    return List(lab);\n};\n\nconst buildObservationFromResource = (resource) => new Records.Observation({\n    resource: (resource.code) ? resource.code.coding : null,\n    text: (resource.code) ? resource.code.text : null,\n    date: resource.issued,\n    quantity: resource.valueQuantity.value ? resource.valueQuantity.value : null,\n    unit: resource.valueQuantity.unit ? resource.valueQuantity.unit : null,\n    interpretation: (resource.interpretation && resource.interpretation.coding) ? resource.interpretation.coding[0].code : null\n});\n"]}