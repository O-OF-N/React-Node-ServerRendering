{"version":3,"sources":["../../../src/server/helper/observation-helper.js"],"names":["Records","Constants","UrlBuilders","fetchGlucoseResults","state","findByState","userAuthenticationModel","Authorization","accessToken","url","buildObeservationURL","patient","iss","AuthorizationHeader","headers","Accept","result","checkResponseStatus","buildGlucoseResultsFromJson","json","status","glucose","data","entry","map","resource","Observation","code","coding","date","issued","quantity","valueQuantity","value","interpretation","filter"],"mappings":"AAAA;;;;;;;;;AAEA;;IAAYA,O;;AACZ;;AACA;;IAAYC,S;;AACZ;;AACA;;;;AACA;;IAAYC,W;;;;;;AAEZ;AACO,IAAMC,4EAAsB,SAAtBA,mBAAsB,CAAWC,KAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACS,mCAAwBC,WAAxB,CAAoCD,KAApC,CADT;;AAAA;AAAA;AAAA;AACxBE,2CADwB;AAEzBC,iCAFyB,eAECD,wBAAwBE,WAFzB;AAGzBC,uBAHyB,GAGnBP,YAAYQ,oBAAZ,CAAiCJ,wBAAwBK,OAAzD,EAAkE,CAAC,SAAD,CAAlE,EAA+EL,wBAAwBM,GAAvG,CAHmB;AAAA;AAAA,2BAIV,sBAAIH,GAAJ,EAAS,IAAIT,QAAQa,mBAAZ,CAAgC,EAAEC,SAAS,EAAEC,QAAQ,uBAAV,EAAmCR,4BAAnC,EAAX,EAAhC,CAAT,CAJU;;AAAA;AAIzBS,0BAJyB;AAAA,qDAKxBC,oBAAoBD,MAApB,IAA8BE,4BAA4BF,MAA5B,CAA9B,GAAoE,IAL5C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAtBb,mBAAsB;AAAA,CAAtB,CAAN;;AASP;AACA,IAAMc,sBAAsB,SAAtBA,mBAAsB,CAACE,IAAD;AAAA,WAAWA,QAAQA,KAAKC,MAAb,IAAuBD,KAAKC,MAAL,KAAgB,GAAxC,GAA+C,IAA/C,GAAsD,KAAhE;AAAA,CAA5B;;AAEA,IAAMF,8BAA8B,SAA9BA,2BAA8B,CAACC,IAAD,EAAU;AAC1C,QAAIE,UAAUF,KAAKG,IAAL,CAAUC,KAAV,CAAgBC,GAAhB,CAAoB,UAACD,KAAD,EAAW;AACzC,YAAIA,SAASA,MAAME,QAAnB,EAA6B;AACzB,gBAAMA,WAAWF,MAAME,QAAvB;AACA,mBAAO,IAAIzB,QAAQ0B,WAAZ,CAAwB;AAC3BD,0BAAWA,SAASE,IAAV,GAAkBF,SAASE,IAAT,CAAcC,MAAhC,GAAyC,IADxB;AAE3BC,sBAAMJ,SAASK,MAFY;AAG3BC,0BAAUN,SAASO,aAAT,CAAuBC,KAHN;AAI3BC,gCAAiBT,SAASS,cAAT,IAA2BT,SAASS,cAAT,CAAwBN,MAApD,GAA8DH,SAASS,cAAT,CAAwBN,MAAxB,CAA+B,CAA/B,EAAkCD,IAAhG,GAAuG;AAJ5F,aAAxB,CAAP;AAMH;AACJ,KAVa,EAUXQ,MAVW,CAUJ;AAAA,eAAUZ,KAAD,GAAU,IAAV,GAAiB,KAA1B;AAAA,KAVI,CAAd;AAWA,WAAO,qBAAKF,OAAL,CAAP;AACH,CAbD","file":"observation-helper.js","sourcesContent":["\"use strict\";\n\nimport * as Records from '../models/models';\nimport {List} from 'immutable';\nimport * as Constants from '../util/constants';\nimport {get} from '../service/http-service'\nimport UserAuthenticationModel from '../models/UserAuthenticationSchema';\nimport * as UrlBuilders from '../util/url-builder';\n\n//Public functions\nexport const fetchGlucoseResults = function* (state) {\n    const [userAuthenticationModel] = yield UserAuthenticationModel.findByState(state);\n    const Authorization = `Bearer ${userAuthenticationModel.accessToken}`;\n    const url = UrlBuilders.buildObeservationURL(userAuthenticationModel.patient, [\"glucose\"], userAuthenticationModel.iss);\n    const result = yield get(url, new Records.AuthorizationHeader({ headers: { Accept: \"application/json+fhir\", Authorization } }));\n    return checkResponseStatus(result) ? buildGlucoseResultsFromJson(result) : null;\n};\n\n\n//Private functions\nconst checkResponseStatus = (json) => (json && json.status && json.status === 200) ? true : false;\n\nconst buildGlucoseResultsFromJson = (json) => {\n    let glucose = json.data.entry.map((entry) => {\n        if (entry && entry.resource) {\n            const resource = entry.resource;\n            return new Records.Observation({\n                resource: (resource.code) ? resource.code.coding : null,\n                date: resource.issued,\n                quantity: resource.valueQuantity.value,\n                interpretation: (resource.interpretation && resource.interpretation.coding) ? resource.interpretation.coding[0].code : null\n            });\n        }\n    }).filter(entry => (entry) ? true : false);\n    return List(glucose);\n};\n"]}