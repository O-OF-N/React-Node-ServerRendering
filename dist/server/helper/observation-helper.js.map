{"version":3,"sources":["../../../src/server/helper/observation-helper.js"],"names":["Records","Constants","fetchObservationResults","state","findByState","userAuthenticationModel","Authorization","accessToken","console","log","OBSERVATIONS_FETCH_URL","AccessHeader","result","checkResponseStatus","buildObservationFromJson","json","status","glucose","data","entry","map","resource","code","coding","GLUCOSE_CODE","Observation","date","issued","quantity","valueQuantity","value","interpretation","filter"],"mappings":"AAAA;;;;;;;;;AAEA;;IAAYA,O;;AACZ;;AACA;;IAAYC,S;;AACZ;;AACA;;;;;;;;AAEO,IAAMC,oFAA0B,SAA1BA,uBAA0B,CAAWC,KAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACK,mCAAwBC,WAAxB,CAAoCD,KAApC,CADL;;AAAA;AAAA;AAAA;AAC5BE,2CAD4B;AAE7BC,iCAF6B,eAEHD,wBAAwBE,WAFrB;;AAGnCC,4BAAQC,GAAR,CAAY,qBAAqBH,aAAjC;AAHmC;AAAA,2BAId,sBAAIL,UAAUS,sBAAd,EACjB,IAAIV,QAAQW,YAAZ,CAAyB,EAAEL,4BAAF,EAAzB,CADiB,CAJc;;AAAA;AAI7BM,0BAJ6B;AAAA,qDAM5BC,oBAAoBD,MAApB,IAA8BE,yBAAyBF,MAAzB,CAA9B,GAAiE,IANrC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA1BV,uBAA0B;AAAA,CAA1B,CAAN;;AASP,IAAMW,sBAAsB,SAAtBA,mBAAsB,CAACE,IAAD;AAAA,WAAWA,QAAQA,KAAKC,MAAb,IAAuBD,KAAKC,MAAL,KAAgB,GAAxC,GAA+C,IAA/C,GAAsD,KAAhE;AAAA,CAA5B;;AAEA,IAAMF,2BAA2B,SAA3BA,wBAA2B,CAACC,IAAD,EAAU;AACvC,QAAIE,UAAUF,KAAKG,IAAL,CAAUC,KAAV,CAAgBC,GAAhB,CAAoB,UAACD,KAAD,EAAW;AACzC,YAAIA,MAAME,QAAN,CAAeC,IAAf,CAAoBC,MAAxB,EAAgC;AAAA,uDACbJ,MAAME,QAAN,CAAeC,IAAf,CAAoBC,MADP;;AAAA,gBACrBD,IADqB;;AAE5B,gBAAIA,KAAKA,IAAL,IAAarB,UAAUuB,YAA3B,EAAyC;AACrC,uBAAO,IAAIxB,QAAQyB,WAAZ,CAAwB;AAC3BC,0BAAMP,MAAME,QAAN,CAAeM,MADM;AAE3BC,8BAAUT,MAAME,QAAN,CAAeQ,aAAf,CAA6BC,KAFZ;AAG3BC,oCAAgBZ,MAAME,QAAN,CAAeU,cAAf,CAA8BR,MAA9B,CAAqC,CAArC,EAAwCD;AAH7B,iBAAxB,CAAP;AAKH;AACJ;AACJ,KAXa,EAWXU,MAXW,CAWJ;AAAA,eAAUb,KAAD,GAAU,IAAV,GAAiB,KAA1B;AAAA,KAXI,CAAd;AAYA,WAAO,qBAAKF,OAAL,CAAP;AACH,CAdD","file":"observation-helper.js","sourcesContent":["\"use strict\";\n\nimport * as Records from '../models/models';\nimport {List} from 'immutable';\nimport * as Constants from '../util/constants';\nimport {get} from '../service/http-service'\nimport UserAuthenticationModel from '../models/UserAuthenticationSchema';\n\nexport const fetchObservationResults = function* (state) {\n    const [userAuthenticationModel] = yield UserAuthenticationModel.findByState(state);\n    const Authorization = `Bearer ${userAuthenticationModel.accessToken}`;\n    console.log(\"Authorization = \" + Authorization);\n    const result = yield get(Constants.OBSERVATIONS_FETCH_URL,\n        new Records.AccessHeader({ Authorization }));\n    return checkResponseStatus(result) ? buildObservationFromJson(result) : null;\n};\n\nconst checkResponseStatus = (json) => (json && json.status && json.status === 200) ? true : false;\n\nconst buildObservationFromJson = (json) => {\n    let glucose = json.data.entry.map((entry) => {\n        if (entry.resource.code.coding) {\n            const [code] = entry.resource.code.coding;\n            if (code.code == Constants.GLUCOSE_CODE) {\n                return new Records.Observation({\n                    date: entry.resource.issued,\n                    quantity: entry.resource.valueQuantity.value,\n                    interpretation: entry.resource.interpretation.coding[0].code\n                });\n            }\n        }\n    }).filter(entry => (entry) ? true : false);\n    return List(glucose);\n};\n"]}