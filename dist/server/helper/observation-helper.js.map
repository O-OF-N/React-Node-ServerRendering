{"version":3,"sources":["../../../src/server/helper/observation-helper.js"],"names":["Records","Constants","UtilFunctions","fetchObservationResults","state","findByState","userAuthenticationModel","Authorization","accessToken","header","AccessHeader","url","buildObeservationURL","patient","iss","AuthorizationHeader","headers","Accept","result","console","log","checkResponseStatus","buildObservationFromJson","json","status","glucose","data","entry","map","resource","Observation","code","coding","date","issued","quantity","valueQuantity","value","interpretation","filter"],"mappings":"AAAA;;;;;;;;;AAEA;;IAAYA,O;;AACZ;;AACA;;IAAYC,S;;AACZ;;AACA;;;;AACA;;IAAYC,a;;;;;;AAEL,IAAMC,oFAA0B,SAA1BA,uBAA0B,CAAWC,KAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACK,mCAAwBC,WAAxB,CAAoCD,KAApC,CADL;;AAAA;AAAA;AAAA;AAC5BE,2CAD4B;AAE7BC,iCAF6B,eAEHD,wBAAwBE,WAFrB;AAG7BC,0BAH6B,GAGpB,IAAIT,QAAQU,YAAZ,CAAyB,EAAEH,4BAAF,EAAzB,CAHoB;AAI7BI,uBAJ6B,GAIvBT,cAAcU,oBAAd,CAAmCN,wBAAwBO,OAA3D,EAAoE,CAAC,SAAD,CAApE,EAAiFP,wBAAwBQ,GAAzG,CAJuB;AAAA;AAAA,2BAKd,sBAAIH,GAAJ,EACjB,IAAIX,QAAQe,mBAAZ,CAAgC,EAAEC,SAAS,EAAEC,QAAQ,uBAAV,EAAmCV,4BAAnC,EAAX,EAAhC,CADiB,CALc;;AAAA;AAK7BW,0BAL6B;;AAOnCC,4BAAQC,GAAR,CAAYF,MAAZ;AAPmC,qDAQ5BG,oBAAoBH,MAApB,IAA8BI,yBAAyBJ,MAAzB,CAA9B,GAAiE,IARrC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA1Bf,uBAA0B;AAAA,CAA1B,CAAN;;AAWP,IAAMkB,sBAAsB,SAAtBA,mBAAsB,CAACE,IAAD;AAAA,WAAWA,QAAQA,KAAKC,MAAb,IAAuBD,KAAKC,MAAL,KAAgB,GAAxC,GAA+C,IAA/C,GAAsD,KAAhE;AAAA,CAA5B;;AAEA,IAAMF,2BAA2B,SAA3BA,wBAA2B,CAACC,IAAD,EAAU;AACvC,QAAIE,UAAUF,KAAKG,IAAL,CAAUC,KAAV,CAAgBC,GAAhB,CAAoB,UAACD,KAAD,EAAW;AACzC,YAAIA,SAASA,MAAME,QAAnB,EAA6B;AACzB,gBAAMA,WAAWF,MAAME,QAAvB;AACA,mBAAO,IAAI7B,QAAQ8B,WAAZ,CAAwB;AAC3BD,0BAAWA,SAASE,IAAV,GAAiBF,SAASE,IAAT,CAAcC,MAA/B,GAAwC,IADvB;AAE3BC,sBAAMJ,SAASK,MAFY;AAG3BC,0BAAUN,SAASO,aAAT,CAAuBC,KAHN;AAI3BC,gCAAiBT,SAASS,cAAT,IAA2BT,SAASS,cAAT,CAAwBN,MAApD,GAA8DH,SAASS,cAAT,CAAwBN,MAAxB,CAA+B,CAA/B,EAAkCD,IAAhG,GAAuG;AAJ5F,aAAxB,CAAP;AAMH;AACJ,KAVa,EAUXQ,MAVW,CAUJ;AAAA,eAAUZ,KAAD,GAAU,IAAV,GAAiB,KAA1B;AAAA,KAVI,CAAd;AAWA,WAAO,qBAAKF,OAAL,CAAP;AACH,CAbD","file":"observation-helper.js","sourcesContent":["\"use strict\";\n\nimport * as Records from '../models/models';\nimport {List} from 'immutable';\nimport * as Constants from '../util/constants';\nimport {get} from '../service/http-service'\nimport UserAuthenticationModel from '../models/UserAuthenticationSchema';\nimport * as UtilFunctions from '../util/util-functions';\n\nexport const fetchObservationResults = function* (state) {\n    const [userAuthenticationModel] = yield UserAuthenticationModel.findByState(state);\n    const Authorization = `Bearer ${userAuthenticationModel.accessToken}`;\n    const header = new Records.AccessHeader({ Authorization });\n    const url = UtilFunctions.buildObeservationURL(userAuthenticationModel.patient, [\"glucose\"], userAuthenticationModel.iss);\n    const result = yield get(url,\n        new Records.AuthorizationHeader({ headers: { Accept: \"application/json+fhir\", Authorization } }));\n    console.log(result);\n    return checkResponseStatus(result) ? buildObservationFromJson(result) : null;\n};\n\nconst checkResponseStatus = (json) => (json && json.status && json.status === 200) ? true : false;\n\nconst buildObservationFromJson = (json) => {\n    let glucose = json.data.entry.map((entry) => {\n        if (entry && entry.resource) {\n            const resource = entry.resource;\n            return new Records.Observation({\n                resource: (resource.code)? resource.code.coding : null,\n                date: resource.issued,\n                quantity: resource.valueQuantity.value,\n                interpretation: (resource.interpretation && resource.interpretation.coding) ? resource.interpretation.coding[0].code : null\n            });\n        }\n    }).filter(entry => (entry) ? true : false);\n    return List(glucose);\n};\n"]}