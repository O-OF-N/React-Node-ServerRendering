{"version":3,"sources":["../../../src/server/helper/observation-helper.js"],"names":["Records","Constants","HttpUtil","fetchGlucoseResults","state","fetchObservationResultsHelper","GLUCOSE_CODES","result","checkResponseStatus","buildGlucoseResultsFromJson","fetchLabResults","LABS_LOINIC_CODES","labs","buildLabResultsFromJson","result1","groupLabs","console","log","lonicCodes","date","duration","findByState","userAuthenticationModel","url","buildObeservationURL","patient","iss","getDateRange","authHeader","buildAuthorizationHeader","loincCodes","results","map","buildResultLoincMap","LONIC_CODES","get","lc","code","LabResult","observation","filter","r","today","Date","yesterday","setHours","getHours","toISOString","json","glucose","data","entry","resource","buildObservationFromResource","sort","compare","lab","Observation","coding","system","LONIC_URL","text","issued","quantity","valueQuantity","value","unit","interpretation","r1","r2","toLowerCase"],"mappings":"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","file":"observation-helper.js","sourcesContent":["\"use strict\";\n\nimport * as Records from '../models/models';\nimport { List, Map as immutableMap } from 'immutable';\nimport * as Constants from '../util/constants';\nimport { get } from '../service/http-service'\nimport * as HttpUtil from '../util/http-utils';\nimport UserAuthenticationModel from '../models/UserAuthenticationSchema';\n\n//Public functions\nexport const fetchGlucoseResults = function* (state) {\n    const result = yield* fetchObservationResultsHelper(state, Constants.GLUCOSE_CODES);\n    return HttpUtil.checkResponseStatus(result) ? buildGlucoseResultsFromJson(result) : null;\n};\n\nexport const fetchLabResults = function* (state) {\n    /*const result = yield* fetchObservationResultsHelper(state, Constants.LABS_LOINIC_CODES, new Date(), 24);*/\n    const result = yield* fetchObservationResultsHelper(state, Constants.LABS_LOINIC_CODES);\n    const labs = HttpUtil.checkResponseStatus(result) ? buildLabResultsFromJson(result) : null;\n    const result1 = groupLabs(Constants.LABS_LOINIC_CODES, labs);\n    console.log(result1);\n    return labs;\n};\n\n\n//Private functions\nconst fetchObservationResultsHelper = function* (state, lonicCodes, date = null, duration = 0) {\n    const [userAuthenticationModel] = yield UserAuthenticationModel.findByState(state);\n    const url = HttpUtil.buildObeservationURL(userAuthenticationModel.patient, lonicCodes, userAuthenticationModel.iss, getDateRange(date, duration));\n    const authHeader = HttpUtil.buildAuthorizationHeader(userAuthenticationModel);\n    const result = yield get(url, authHeader);\n    return result;\n};\n\nconst groupLabs = (loincCodes, results) => {\n    console.log(loincCodes);\n    console.log(typeof loincCodes);\n    const result = loincCodes.map(lc => buildResultLoincMap(Constants.LONIC_CODES.get(lc), results));\n    console.log(result);\n    return result;\n}\n\nconst buildResultLoincMap = (code, results) => {\n    console.log(code);\n    console.log(results);\n    return new Records.LabResult({ code: code, observation: results.filter(r => r.code === code) });\n};\nconst getDateRange = (date, duration) => {\n    if (date && duration) {\n        const today = new Date(date);\n        const yesterday = new Date(today);\n        yesterday.setHours(today.getHours() - 24);\n        return [new Date(yesterday).toISOString(), today.toISOString()];\n    }\n    return null;\n}\n\nconst buildGlucoseResultsFromJson = (json) => {\n    let glucose = (json.data && json.data.entry) ? json.data.entry.map((entry) => {\n        if (entry && entry.resource) {\n            const resource = entry.resource;\n            return buildObservationFromResource(resource);\n        }\n    }).filter(entry => (entry) ? true : false).sort(compare) : null;\n    return List(glucose);\n};\n\nconst buildLabResultsFromJson = (json) => {\n    let lab = (json.data && json.data.entry) ? json.data.entry.map((entry) => {\n        if (entry && entry.resource) {\n            const resource = entry.resource;\n            return buildObservationFromResource(resource);\n        }\n    }).filter(entry => (entry) ? true : false).sort(compare) : null;\n    return List(lab);\n};\n\nconst buildObservationFromResource = (resource) => new Records.Observation({\n    resource: (resource.code && resource.code.coding) ? resource.code.coding.filter(code => code.system === Constants.LONIC_URL)[0]['code'] : null,\n    text: (resource.code) ? resource.code.text : null,\n    date: resource.issued,\n    quantity: resource.valueQuantity && resource.valueQuantity.value ? resource.valueQuantity.value : null,\n    unit: resource.valueQuantity && resource.valueQuantity.unit ? resource.valueQuantity.unit : null,\n    interpretation: (resource.interpretation && resource.interpretation.coding) ? resource.interpretation.coding[0].code : null\n});\n\nconst compare = (r1, r2) => (r1 && r2) ? r1.text.toLowerCase() > r2.text.toLowerCase() ? 1 : r2.text.toLowerCase() > r1.text.toLowerCase() ? -1 : r1.date > r2.date ? 1 : -1 : 0;"]}