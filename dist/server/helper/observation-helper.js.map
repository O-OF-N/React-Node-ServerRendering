{"version":3,"sources":["../../../src/server/helper/observation-helper.js"],"names":["Records","Constants","HttpUtil","fetchGlucoseResults","state","GLUCOSE_RESULT_DURATION_HOURS","fetchObservationResultsHelper","GLUCOSE_CODES","Date","result","checkResponseStatus","buildGlucoseResultsFromJson","fetchLabResults","LAB_RESULT_DURATION_HOURS","LABS_LOINIC_CODES","labs","buildLabResultsFromJson","groupLabs","lonicCodesList","date","duration","findByState","userAuthenticationModel","url","buildObeservationURL","patient","flatMap","iss","getDateRange","authHeader","buildAuthorizationHeader","response","status","message","lonicCodes","forEach","lonicCode","LONIC_CODES","get","codes","Array","push","loincCodes","results","map","buildResultLoincMap","lc","filter","r","observation","size","code","LabResult","includes","resource","sort","slice","LAB_RESULT_COUNT","today","yesterday","setHours","getHours","toISOString","json","glucose","data","entry","buildObservationFromResource","compare","lab","Observation","coding","system","LONIC_URL","text","issued","quantity","valueQuantity","value","unit","interpretation","source","category","OBSERVATION_CATEGORY_URL","r1","r2","toLowerCase"],"mappings":"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","file":"observation-helper.js","sourcesContent":["\"use strict\";\n\nimport * as Records from '../models/models';\nimport { List, Map as immutableMap } from 'immutable';\nimport * as Constants from '../util/constants';\nimport { get } from '../service/http-service'\nimport * as HttpUtil from '../util/http-utils';\nimport { ObservationFetchError } from '../util/exceptions';\nimport UserAuthenticationModel from '../models/UserAuthenticationSchema';\n\n//Public functions\nexport const fetchGlucoseResults = function* (state) {\n    const result = Constants.GLUCOSE_RESULT_DURATION_HOURS ?\n        yield* fetchObservationResultsHelper(state, Constants.GLUCOSE_CODES, new Date(), Constants.GLUCOSE_RESULT_DURATION_HOURS) :\n        yield* fetchObservationResultsHelper(state, Constants.GLUCOSE_CODES);\n    return HttpUtil.checkResponseStatus(result) ? buildGlucoseResultsFromJson(result) : null;\n};\n\nexport const fetchLabResults = function* (state) {\n    const result = Constants.LAB_RESULT_DURATION_HOURS ?\n        yield* fetchObservationResultsHelper(state, Constants.LABS_LOINIC_CODES, new Date(), Constants.LAB_RESULT_DURATION_HOURS) :\n        yield* fetchObservationResultsHelper(state, Constants.LABS_LOINIC_CODES);\n    const labs = HttpUtil.checkResponseStatus(result) ? buildLabResultsFromJson(result) : null;\n    return groupLabs(Constants.LABS_LOINIC_CODES, labs);\n};\n\n\n//Private functions\nconst fetchObservationResultsHelper = function* (state, lonicCodesList, date = null, duration = 0) {\n    try {\n        const [userAuthenticationModel] = yield UserAuthenticationModel.findByState(state);\n        const url = HttpUtil.buildObeservationURL(userAuthenticationModel.patient, flatMap(lonicCodesList), userAuthenticationModel.iss, getDateRange(date, duration));\n        const authHeader = HttpUtil.buildAuthorizationHeader(userAuthenticationModel);\n        const result = yield get(url, authHeader);\n        return result;\n    } catch (err) {\n        if (err.response.status === 500) {\n            throw new ObservationFetchError('Cerner services may be down');\n        } else {\n            throw new ObservationFetchError(err.message);\n        }\n    }\n};\n\nconst flatMap = (lonicCodesList) => {\n    let lonicCodes = [];\n    lonicCodesList ? lonicCodesList.forEach(codes => {\n        const lonicCode = Constants.LONIC_CODES.get(codes);\n        lonicCode instanceof Array ? lonicCodes.push(...lonicCode) : lonicCodes.push(lonicCode);\n    }) : null;\n    return lonicCodes;\n};\n\nconst groupLabs = (loincCodes, results) => loincCodes.map(lc => buildResultLoincMap(lc, Constants.LONIC_CODES.get(lc), results)).filter(r => r.observation.size);\n\nconst buildResultLoincMap = (lc, code, results) => new Records.LabResult({ code: lc, observation: results.filter(r => code.includes(r.resource)).sort(r => r.date).slice(0, Constants.LAB_RESULT_COUNT) });\n\nconst getDateRange = (date, duration) => {\n    if (date && duration) {\n        const today = new Date(date);\n        const yesterday = new Date(today);\n        yesterday.setHours(today.getHours() - 24);\n        return [new Date(yesterday).toISOString(), today.toISOString()];\n    }\n    return null;\n};\n\nconst buildGlucoseResultsFromJson = (json) => {\n    let glucose = (json.data && json.data.entry) ? json.data.entry.map((entry) => {\n        if (entry && entry.resource) {\n            const resource = entry.resource;\n            return buildObservationFromResource(resource);\n        }\n    }).filter(entry => (entry) ? true : false).sort(compare) : null;\n    return List(glucose);\n};\n\nconst buildLabResultsFromJson = (json) => {\n    let lab = (json.data && json.data.entry) ? json.data.entry.map((entry) => {\n        if (entry && entry.resource) {\n            const resource = entry.resource;\n            return buildObservationFromResource(resource);\n        }\n    }).filter(entry => (entry) ? true : false) : null;\n    return List(lab);\n};\n\nconst buildObservationFromResource = (resource) => new Records.Observation({\n    resource: (resource.code && resource.code.coding) ? resource.code.coding.filter(code => code.system === Constants.LONIC_URL)[0]['code'] : null,\n    text: (resource.code) ? resource.code.text : null,\n    date: resource.issued,\n    quantity: resource.valueQuantity && resource.valueQuantity.value ? resource.valueQuantity.value : null,\n    unit: resource.valueQuantity && resource.valueQuantity.unit ? resource.valueQuantity.unit : null,\n    interpretation: (resource.interpretation && resource.interpretation.coding) ? resource.interpretation.coding[0].code : null,\n    source: (resource.category && resource.category.coding) ? resource.category.coding.filter(code => code.system === Constants.OBSERVATION_CATEGORY_URL)[0]['code'] : null\n});\n\nconst compare = (r1, r2) => (r1 && r2) ? r1.text.toLowerCase() > r2.text.toLowerCase() ? 1 : r2.text.toLowerCase() > r1.text.toLowerCase() ? -1 : r1.date > r2.date ? 1 : -1 : 0;"]}